ACS Grammar
===============================================================================

Special terminals:
   E (Empty): Indicates the rule is optional

NOTE: This grammar attempts to follow closely the grammar that the acc compiler
implements, but to simplify the development of the bcc compiler, the grammar is
not 100% accurate. Some errors that are syntactic errors in acc are now
semantic errors in bcc.

-------------------------------------------------------------------------------

module:
   <module-body>

module-body:
   <module-item-list>
   E

module-item-list:
   <module-item>
   <module-item-list> <module-item>

module-item:
   <directive>
   <variable>
   <function>
   <script>
   <special>

directive:
   # include <string>
   # import <string>
   # library <string>
   # define <string> <expression>
   # libdefine <string> <expression>
   # encryptstrings
   # nocompact
   # wadauthor
   # nowadauthor
   # region
   # endregion

variable:
   <visibility> <storage> <specifier> <instance-list> ;

// NOTE: This rule does not actually deal with visibility. The rule is named
// this way to be consistent with the BCS grammar. 
visibility:
   static

storage:
   world
   global
   E

storage-index:
   <decimal-number> :
   E

specifier:
   int
   bool
   str
   void

instance-list:
   <instance>
   <instance-list> , <instance>

instance:
   <instance-name>
   <instance-name> = <initializer>
   <instance-name> <dimension-list>
   <instance-name> <dimension-list> = <initializer>

instance-name:
   <storage-index> <identifier>

dimension-list:
   [ <expression> ]
   <dimension-list> [ <expression> ]

initializer:
   <expression>
   <braced-initializer>

braced-initializer:
   { <initializer-list> }
   { <initializer-list> , }

initializer-list:
   <initializer>
   <initializer-list> , <initializer>

function:
   function <function-return> <identifier> ( <parameter-list-declaration> )
      <block-statement>

function-return:
   int
   bool
   str
   void

parameter-list-declaration:
   <parameter-list>
   void

parameter-list:
   <parameter>
   <parameter-list> , <parameter>

parameter:
   <parameter-specifier> <identifier>

parameter-specifier:
   int
   bool
   str

script:
   script <script-tag> <script-parameter-parentheses> <script-type>
      <script-flag> <statement>

script-tag:
   <string>
   << 0 >>
   // When reading the script number, function calls are not parsed because
   // they conflict with the start of the parameter list.
   <expression>

script-parameter-parentheses:
   ( <script-parameter-list> )
   ( void )

script-parameter-list:
   <script-parameter>
   <script-parameter-list> , <script-parameter>

script-parameter:
   int <identifier>

script-type:
   bluereturn
   death
   disconnect
   enter
   event
   kill
   lightning
   open
   pickup
   redreturn
   reopen
   respawn
   return
   unloading
   whitereturn
   E

script-flag:
   net
   net clientside
   clientside
   E

special:
   special <special-list> ;

special-list:
   <special-item>
   <special-list> , <special-item>

special-item:
   <special-sign> <decimal-number> : <identifier> ( <special-parameter-list> )

special-sign:
   - // If '-' is specified, the item is an extension function. Otherwise, the
     // item is an action-special.
   E

special-parameter-list:
   <decimal-number> // Maximum parameters.
   <decimal-number> , <decimal-number> // Minimum parameters, ',',
                                       // maximum parameters.

statement:
   <variable>
   <block-statement>
   <if-statement>
   <switch-statement>
   <case-label>
   <while-statement>
   <do-statement>
   <for-statement>
   <jump-statement>
   <script-jump-statement>
   <return-statement>
   <palette-translation>
   <empty-statement>
   <expression-statement>

statement-list:
   <statement>
   <statement-list> <statement>

block-statement:
   { <statement-list> }
   { }

if-statement:
   if ( <expression> ) <statement>
   if ( <expression> ) <statement> else <statement>

switch-statement:
   switch ( <expression> ) <statement>

case-label:
   case <expression> :
   default :

while-statement:
   while ( <expression> ) <statement>
   until ( <expression> ) <statement>

do-statement:
   do <statement> while ( <expression> ) ;
   do <statement> until ( <expression> ) ;

for-statement:
   for ( <for-initialization> <for-condition> <for-post> ) <statement>

for-initialization:
   <variable>
   <expression-list> ;
   ;

for-condition:
   <expression> ;

for-post:
   <expression-list>

jump-statement:
   break ;
   continue ;

script-jump-statement:
   terminate ;
   suspend ;
   restart ;

return-statement:
   return <expression> ;
   return ;

palette-translation:
   createtranslation ( <expression> )
   createtranslation ( <expression> , <palette-range-list> )

palette-range-list:
   <palette-range>
   <palette-range-list> , <palette-range>

palette-range:
   // NOTE: Assignment is not parsed in the second expression because it will
   // conflict with the following assignment token.
   <expression> : <expression> = <palette-range-value>

palette-range-value:
   <expression> : <expression>
   <palette-range-rgb>
   % <palette-range-rgb>

palette-range-rgb:
   [ <expression> , <expression> , <expression> ] :
      [ <expression> , <expression> , <expression> ]

empty-statement:
   ;

expression-statement:
   <expression-list>

expression-list:
   <expression>
   <expression-list> , <expression>

expression:
   <assignment>

assignment:
   <prefix>
   <prefix>   = <logical-or>
   <prefix>  += <logical-or>
   <prefix>  -= <logical-or>
   <prefix>  *= <logical-or>
   <prefix>  /= <logical-or>
   <prefix>  %= <logical-or>
   <prefix> <<= <logical-or>
   <prefix> >>= <logical-or>
   <prefix>  &= <logical-or>
   <prefix>  ^= <logical-or>
   <prefix>  |= <logical-or>

logical-or:
   <logical-and>
   <logical-or> || <logical-and>

logical-and:
   <bitwise-or>
   <logical-and> && <bitwise-or>

bitwise-or:
   <bitwise-xor>
   <bitwise-or> | <bitwise-xor>

bitwise-xor:
   <bitwise-and>
   <bitwise-xor> ^ <bitwise-and>

bitwise-and:
   <equal>
   <bitwise-and> & <equal>

equal:
   <less-than>
   <equal> == <less-than>
   <equal> != <less-than>

less-than:
   <bitwise-shift>
   <less-than> <  <bitwise-shift>
   <less-than> <= <bitwise-shift>
   <less-than> >  <bitwise-shift>
   <less-than> >= <bitwise-shift>
 
bitwise-shift:
   <addition>
   <bitwise-shift> << <addition>
   <bitwise-shift> >> <addition>

addition:
   <multiplication>
   <addition> + <multiplication>
   <addition> - <multiplication>

multiplication:
   <prefix>
   <multiplication> * <prefix>
   <multiplication> / <prefix>
   <multiplication> % <prefix>

prefix:
   <suffix>
   ++ <prefix>
   -- <prefix>
   -  <prefix>
   +  <prefix>
   !  <prefix>
   ~  <prefix>

suffix:
   <primary>
   <suffix> ++
   <suffix> --
   <suffix> [ <expression> ]
   <suffix> ( )
   <suffix> ( <expression-list> )
   <suffix> ( const : <expression-list> )
   <suffix> ( <format-item-list> )
   <suffix> ( <format-item-list> ; <expression-list> )

format-item-list:
   <format-item>
   <format-item-list> , <format-item>

format-item:
   <format-cast> : <expression>
   <format-item-array>

format-cast:
   <identifier> // Valid values: b, c, d, f, i, k, l, n, s, x

format-item-array:
   a : <expression>
   a : ( <expression> )
   a : ( <expression> , <expression> )
   a : ( <expression> , <expression> , <expression> )

primary:
   <strcpy>
   <identifier>
   <number>
   <string>
   <character>
   ( <expression> )
   print
   printbold
   log
   hudmessage
   hudmessagebold
   strparam
   acs_executewait
   acs_namedexecutewait

strcpy:
   strcpy <strcpy-call>

strcpy-call:
   ( <strcpy-source-argument> , <expression> )
   ( <strcpy-source-argument> , <expression> , <expression> )

strcpy-source-argument:
   <format-item-array>

identifier:
   [a-zA-Z_][a-zA-Z0-9_]*

number:
   <decimal-number>
   <hexadecimal-number>
   <fixed-point-number>
   <radix-number>

decimal-number:
   [0-9]+

hexadecimal-number:
   0[xX][0-9a-fA-F]*

fixed-point-number:
   [0-9]+[.][0-9]+

radix-number:
   [0-9]+[_][0-9a-zA-Z]+

string:
   "([^\\"]|\\")*"

character:
   '.'
   ' <character-escape-sequence> '

character-escape-sequence:
   \\a
   \\b
   \\n
   \\t
   \\v
   \\f
   \\r
   \\'
   \\\\
   \\[0-7]{1,4}
   \\[xX][0-9a-fA-F]+

comment:
   [/][/][^\n]+ // Single-line comment.
   [/][*]([^*]*[*]+)+[/] // Multi-line comment.

keyword:
   acs_executewait
   acs_namedexecutewait
   bluereturn
   bool
   break
   case
   clientside
   const
   continue
   createtranslation
   death
   default
   define
   disconnect
   do
   else
   encryptstrings
   endregion
   enter
   event
   for
   function
   global
   goto
   hudmessage
   hudmessagebold
   if
   import
   include
   int
   kill
   libdefine
   library
   lightning
   log
   net
   nocompact
   nowadauthor
   open
   pickup
   print
   printbold
   redreturn
   region
   reopen
   respawn
   restart
   return
   script
   special
   static
   str
   strcpy
   strparam
   suspend
   switch
   terminate
   unloading
   until
   void
   wadauthor
   while
   whitereturn
   world